name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'

  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: false
        type: string

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true

jobs:
  validate-tag:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}

    steps:
      - name: Extract version from tag or input
        id: extract
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            VERSION=${VERSION#v}
          else
            TAG=${GITHUB_REF#refs/tags/}
            VERSION=${TAG#v}
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: v0.1.0 or 0.1.0 (semver)"
            exit 1
          fi
          echo "Valid semver format"
          
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: validate-tag
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build library
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --configuration Release --no-build --verbosity normal

  pack:
    name: Release packages
    runs-on: ubuntu-latest
    needs: [validate-tag, build-and-test]
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build library
        run: dotnet build --configuration Release --no-restore

      - name: Pack NuGet packages
        run: |
          VERSION=${{ needs.validate-tag.outputs.version }}
          echo "Packing version: $VERSION"
          
          # Pack Core library
          dotnet pack src/TypeGuard.Core/TypeGuard.Core.csproj \
            --configuration Release --no-build --output ./artifacts \
            /p:PackageVersion=$VERSION
          
          # Pack Console library
          dotnet pack src/TypeGuard.Console/TypeGuard.Console.csproj \
            --configuration Release --no-build --output ./artifacts \
            /p:PackageVersion=$VERSION
    
      - name: Validate package contents
        run: |
          echo "Package contents:"
          ls -lh ./artifacts/
          
          if [ ! -f ./artifacts/TypeGuard.Core.${{ needs.validate-tag.outputs.version }}.nupkg ]; then
            echo "TypeGuard.Core package not found!"
            exit 1
          fi
          if [ ! -f ./artifacts/TypeGuard.Console.${{ needs.validate-tag.outputs.version }}.nupkg ]; then
            echo "TypeGuard.Console package not found!"
            exit 1
          fi
          echo "Both packages created successfully"

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package-${{ needs.validate-tag.outputs.version }}
          path: ./artifacts/*.nupkg
          retention-days: 90
          if-no-files-found: error

  publish:
    name: Publish packages
    runs-on: ubuntu-latest
    needs: [validate-tag, pack]
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      packages: write
    environment:
      name: nuget-production
      url: https://www.nuget.org/packages/ConsolePrism/${{ needs.validate-tag.outputs.version }}
    
    steps:
      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: nuget-package-${{ needs.validate-tag.outputs.version }}
          path: ./artifacts

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

        # Stable versions
      - name: Publish to NuGet.org
        if: |
          !contains(github.ref, '-alpha') && 
          !contains(github.ref, '-beta') && 
          !contains(github.ref, '-rc')
        run: |
          echo "Publishing TypeGuard packages v${{ needs.validate-tag.outputs.version }}"
          for package in ./artifacts/*.nupkg; do
            echo "Publishing $(basename $package)"
            dotnet nuget push "$package" \
              --api-key ${{ secrets.NUGET_API_KEY }} \
              --source https://api.nuget.org/v3/index.json \
              --skip-duplicate
          done
          
        # Unstable versions
      - name: Publish to GitHub Packages
        run: |
          echo "Publishing ConsolePrism v${{ needs.validate-tag.outputs.version }} to GitHub Packages"
          dotnet nuget push ./artifacts/*.nupkg \
            --api-key ${{ secrets.GITHUB_TOKEN }} \
            --source https://nuget.pkg.github.com/DoubledDoge/index.json \
            --skip-duplicate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set release variables
        id: set_vars
        run: |
          echo "VERSION=${{ needs.validate-tag.outputs.version }}" >> $GITHUB_ENV
          echo "TAG=v${{ needs.validate-tag.outputs.version }}" >> $GITHUB_ENV

      - name: Check for existing release
        id: check_release
        uses: actions/github-script@v6
        with:
          script: |
            const tag = process.env.TAG;
            try {
              await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag
              });
              core.setOutput('exists', 'true');
            } catch (err) {
              core.setOutput('exists', 'false');
            }
        env:
          TAG: ${{ env.TAG }}

      - name: Create GitHub Release (if not exists)
        if: steps.check_release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG }}
          files: ./artifacts/ConsolePrism.${{ needs.validate-tag.outputs.version }}.nupkg
          generate_release_notes: true
          draft: false
          prerelease: ${{ !startsWith(needs.validate-tag.outputs.version, '1.') }}
          body: |
            ## ConsolePrism v${{ needs.validate-tag.outputs.version }}
            
            ### Installation
            ```bash
            dotnet add package ConsolePrism --version ${{ needs.validate-tag.outputs.version }}
            ```
            
            ### NuGet Package
            https://www.nuget.org/packages/ConsolePrism/${{ needs.validate-tag.outputs.version }}

      - name: Upload artifact to existing release
        if: steps.check_release.outputs.exists == 'true'
        run: |
          gh release upload "${{ env.TAG }}" ./artifacts/ConsolePrism.${{ needs.validate-tag.outputs.version }}.nupkg --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}